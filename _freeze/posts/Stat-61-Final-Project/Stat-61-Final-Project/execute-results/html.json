{
  "hash": "646d846fccc5e413538878284cabc1d4",
  "result": {
    "markdown": "---\ntitle: \"Gaussian Mixture Models and Expectation-Maximization\"\nauthor: \"Abraham Porschet\"\ndate: \"2023-12-10\"\ncategories: [code, analysis]\nimage: \"image.png\"\n---\n\n# Expectation Maximization\n\nThe *Expectation Maximization (E-M) Algorithm* is an iterative approach to find maximum likelihood estimates for latent variables (since the things we want to maximize are only indirectly available). It is comprised of an estimation step, which tries to estimate the unknown variables, and a maximization step, which then tries to optimize the parameters of the model to better explain the data.\n\nThe unknown parameters are sometimes written as $\\phi$ or $\\Theta$, and we can call the latent, \"nuisance,\" variables $J$, and the observed data $U$. So, from above, the process can be roughly seen as \n$$ \\Theta^* = \\operatorname*{argmax}_{\\Theta} \\sum_{J\\in\\mathcal{J}^n} P(\\Theta, J|U) $$ \nSince this shows us maximizing the posterior probability of parameters $\\Theta$ given our data and we are summing over $J$ in order to marginalize out our latent variables (Dellaert, 2002).\n\nThis process was first rigorously defined on the exponential family, where the probability density functions take the form \n$$ f(x|\\phi) = b(x)\\exp(\\phi t(x)^T/a(\\phi))$$\n\nwhere $\\phi$ is a $1\\times r$ parameter vector and $t(x)$ is a $1\\times r$ vector of sufficient statistics for the data. Our \"natural parameter\" for these exponential distributions is given by some $r\\times r$ linear transformation. \n\nTo run the \\textbf{E-M} algorithm on this example, we first enter the expectation step, and take $t^{(p)}=E[t(x)|y,\\phi^{(p)}]$  with the $(p)$ denoting the $p^{th}$ cycle of the algorithm, trying to estimate the vector of sufficient statistics for the exponential distribution. \n\nThe maximization step, is then taking the equation $E[t(x)|y,\\phi^{(p)}]=t^{(p)}$ and we call the solution to this equation $\\phi^{(p+1)}$. We then plug in $\\phi^{(p+1)}$ to the expectation step and keep iterating. \n\nThis looks nice, and seems like it could work, but if you are anything like me, you might wonder how we decide when to stop. Possibly the coolest part of this algorithm is that it actually converges to a local maximum every time (Dempster *et al.* 1976). Since it always converges to a local maximum, it means that if we \"guess\" a decent parameter space to start off the algorithm, we will converge to what is likely to be a very solid set of estimates.\n\nIn Dempster, Laird, and Rubin's seminal paper *Maximum Likelihood via the 'EM' Algorithm*, they enumerate the process detailed above, proved the convergence, and later on, proposed that E-M could be used to in *finite clusters*. This foreshadowed the most common usage of the algorithm, clustering, or more specifically, dividing unlabeled data into nice clusters. For example, if we know that our raw data is comprised of unique groups represented by different probability distributions, we can use the E-M algorithm to change the parameters for the estimated distributions of these groups to maximize the probability that the data belongs to the proposed clustering.\n\n## Gaussian Mixture Modeling\n\nOne of the most common usages of expectation maximization, and specifically clustering, is *Gaussian Mixture Modeling* (GMM) (Hasselblad 1966). This process is essentially assuming that each group you are trying to sort out is represented by a normal distribution. This is often a very convenient technique to use because things often actually do follow normal distributions because of the central limit theorem (everyone's favorite statistics theorem) and because once we have clusters that are normal, it is much easier to do inference on the clusters and talk about them with people who don't know as much about statistics because gaussian distributions are so well understood.\n\nGMMs are used to observe clusters everywhere. They are used to create customer archetypes in retail, to better understand the different ways people shop, they are used in medical scenarios in order to identify types of tumors for cancer detection. From this little sample of use cases, it is pretty obvious that this is a really powerful (and pretty cool) use for a powerful algorithm.\n\n## Example Code\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#importing necessary packages\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt \nimport pandas as pd \nimport numpy as np\nfrom numpy import random\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport seaborn as sns \n```\n:::\n\n\nTo show how effective this algorithm can be, I am going to make a set of five blobs of data, each with a center, and then I will show how accurately the algorithm can cluster the data into the blobs that created the underlying data.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#set a random seed so that we actually get clusters that kind of look like separate clusters\nrandom.seed(195)\nx, _ = make_blobs(n_samples=450, centers=5, cluster_std=1.84)\nplt.figure(figsize=(8, 6))\nplt.scatter(x[:,0], x[:,1])\nplt.show() \n```\n\n::: {.cell-output .cell-output-display}\n![](Stat-61-Final-Project_files/figure-html/cell-3-output-1.png){width=652 height=485}\n:::\n:::\n\n\nNow I'm going to fit the algorithm with the prior understanding that the data is made of five clusters of approximately normal data.\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n{'covariance_type': 'full',\n 'init_params': 'kmeans',\n 'max_iter': 100,\n 'means_init': None,\n 'n_components': 5,\n 'n_init': 1,\n 'precisions_init': None,\n 'random_state': None,\n 'reg_covar': 1e-06,\n 'tol': 0.001,\n 'verbose': 0,\n 'verbose_interval': 10,\n 'warm_start': False,\n 'weights_init': None}\n```\n:::\n:::\n\n\nThis code here fits the model and lets it learn from the data, in the next plot, I will plot the centers that the data came up with, and then on the plot after that I will plot the boundaries for the clusters that the algorithm came up with.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ncenters = gm.means_\nplt.figure(figsize=(8, 6))\nplt.scatter(x[:,0], x[:,1], label=\"data\")\nplt.scatter(centers[:,0], centers[:,1],c='r', label=\"centers\")\nplt.legend()\nplt.show() \n```\n\n::: {.cell-output .cell-output-display}\n![](Stat-61-Final-Project_files/figure-html/cell-5-output-1.png){width=652 height=485}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\npred = gm.predict(x)\n\ndf = pd.DataFrame({'x':x[:,0], 'y':x[:,1], 'label':pred})\ngroups = df.groupby('label')\n\nig, ax = plt.subplots()\nfor name, group in groups:\n    ax.scatter(group.x, group.y, label=name)\n\nax.legend()\nplt.show() \n```\n\n::: {.cell-output .cell-output-display}\n![](Stat-61-Final-Project_files/figure-html/cell-6-output-1.png){width=578 height=411}\n:::\n:::\n\n\nThe accuracy is really fantastic. It plots the centers exactly where I would have, and then is able to pick which dots it belongs to which groups with great accuracy. \n\nNow if we consider a dataset with millions of points and possibly hundreds or thousands of dimensions, this allows for very sensitive anomaly detection for genetic disorders by clustering genes or proteins it helps us see just how helpful this could be.\n\n## The NBA\n\n![](nbaPic.jpeg){width=\"50%\"}\n\nBasketball as a sport is changing. Players like Stephen Curry have changed perceptions around what a point guard is supposed to do, Nikola Jokic is reinventing the center position, and some teams are playing with centers who are shorter than 6'5. Another even bigger change is the advent of extremely tall players playing seemingly positionless basketball, the trend started by players such as Kevin Durant and Kristaps Porzingis, and continued by younger players like Chet Holmgren and Victor Wembanyama.\n\nPeople are playing basketball differently. To effectively understand the game, the old labels of point guard, shooting guard, center, power forward, and small forward don't seem to suffice, which means that we want to find new labels for positions in order to regroup players.\n\nThis seems to be a problem uniquely well suited to clustering. I plan on looking at a few things, how the clusters of players in the modern NBA compare to the positions that players are assigned to. Secondly, I am curious if the NBA has become more specialized, i.e. if there are more than five positions, and players are acquired and used for more specific purposes than in the past. To answer these questions, even just a little bit, I plan on clustering players from the 2022 season (stats acquired from Basketball Reference) and answering my first question using that data and model, and then taking in data from the 1986 season (that was fun and long enough ago to measure change) and looking at the difference in number of clusters for those seasons.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nyear = 2022\nurl = 'https://www.basketball-reference.com/leagues/NBA_2022_per_game.html'\nhtml = urlopen(url)\norg_html = BeautifulSoup(html)\n#this reads in data from an html file from basketball reference. I took this code from the documentation of an api for basketball data but I didn't like their functionality and so I just altered their source code to get my own thing :) the api was nba_api on PyPI\n\norg_html.findAll('tr', limit=2) #this should get me the columns from the website.\nheaders = [th.getText() for th in org_html.findAll('tr', limit=2)[0].findAll('th')]\nheaders = headers[1:]\nheaders\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n#now we want to turn this mess of text we ripped from html into a dataframe (thumbs up emoji)\n\nrows = org_html.findAll('tr')[1:]\nplayer_stats = [[td.getText() for td in rows[i].findAll('td')]\n            for i in range(len(rows))]\ndata = pd.DataFrame(player_stats, columns = headers)\ndata.head() #YAYYYYY\ndata.tail()\n```\n:::\n\n\nThere are a few instances of the same player showing multiple times in the dataframe since people were traded and played for different teams throughout the season, so I took the averages of all of their values to create a set of stats for the season for them.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndata.drop(columns=['Pos', 'Age', 'Tm', 'G', 'GS'], axis=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Player</th>\n      <th>MP</th>\n      <th>FG</th>\n      <th>FGA</th>\n      <th>FG%</th>\n      <th>3P</th>\n      <th>3PA</th>\n      <th>3P%</th>\n      <th>2P</th>\n      <th>2PA</th>\n      <th>...</th>\n      <th>FT%</th>\n      <th>ORB</th>\n      <th>DRB</th>\n      <th>TRB</th>\n      <th>AST</th>\n      <th>STL</th>\n      <th>BLK</th>\n      <th>TOV</th>\n      <th>PF</th>\n      <th>PTS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Precious Achiuwa</td>\n      <td>23.6</td>\n      <td>3.6</td>\n      <td>8.3</td>\n      <td>.439</td>\n      <td>0.8</td>\n      <td>2.1</td>\n      <td>.359</td>\n      <td>2.9</td>\n      <td>6.1</td>\n      <td>...</td>\n      <td>.595</td>\n      <td>2.0</td>\n      <td>4.5</td>\n      <td>6.5</td>\n      <td>1.1</td>\n      <td>0.5</td>\n      <td>0.6</td>\n      <td>1.2</td>\n      <td>2.1</td>\n      <td>9.1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Steven Adams</td>\n      <td>26.3</td>\n      <td>2.8</td>\n      <td>5.1</td>\n      <td>.547</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>.000</td>\n      <td>2.8</td>\n      <td>5.0</td>\n      <td>...</td>\n      <td>.543</td>\n      <td>4.6</td>\n      <td>5.4</td>\n      <td>10.0</td>\n      <td>3.4</td>\n      <td>0.9</td>\n      <td>0.8</td>\n      <td>1.5</td>\n      <td>2.0</td>\n      <td>6.9</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Bam Adebayo</td>\n      <td>32.6</td>\n      <td>7.3</td>\n      <td>13.0</td>\n      <td>.557</td>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>.000</td>\n      <td>7.3</td>\n      <td>12.9</td>\n      <td>...</td>\n      <td>.753</td>\n      <td>2.4</td>\n      <td>7.6</td>\n      <td>10.1</td>\n      <td>3.4</td>\n      <td>1.4</td>\n      <td>0.8</td>\n      <td>2.6</td>\n      <td>3.1</td>\n      <td>19.1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Santi Aldama</td>\n      <td>11.3</td>\n      <td>1.7</td>\n      <td>4.1</td>\n      <td>.402</td>\n      <td>0.2</td>\n      <td>1.5</td>\n      <td>.125</td>\n      <td>1.5</td>\n      <td>2.6</td>\n      <td>...</td>\n      <td>.625</td>\n      <td>1.0</td>\n      <td>1.7</td>\n      <td>2.7</td>\n      <td>0.7</td>\n      <td>0.2</td>\n      <td>0.3</td>\n      <td>0.5</td>\n      <td>1.1</td>\n      <td>4.1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LaMarcus Aldridge</td>\n      <td>22.3</td>\n      <td>5.4</td>\n      <td>9.7</td>\n      <td>.550</td>\n      <td>0.3</td>\n      <td>1.0</td>\n      <td>.304</td>\n      <td>5.1</td>\n      <td>8.8</td>\n      <td>...</td>\n      <td>.873</td>\n      <td>1.6</td>\n      <td>3.9</td>\n      <td>5.5</td>\n      <td>0.9</td>\n      <td>0.3</td>\n      <td>1.0</td>\n      <td>0.9</td>\n      <td>1.7</td>\n      <td>12.9</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>837</th>\n      <td>Thaddeus Young</td>\n      <td>18.3</td>\n      <td>2.6</td>\n      <td>5.5</td>\n      <td>.465</td>\n      <td>0.7</td>\n      <td>1.7</td>\n      <td>.395</td>\n      <td>1.9</td>\n      <td>3.9</td>\n      <td>...</td>\n      <td>.481</td>\n      <td>1.5</td>\n      <td>2.9</td>\n      <td>4.4</td>\n      <td>1.7</td>\n      <td>1.2</td>\n      <td>0.4</td>\n      <td>0.8</td>\n      <td>1.7</td>\n      <td>6.3</td>\n    </tr>\n    <tr>\n      <th>838</th>\n      <td>Trae Young</td>\n      <td>34.9</td>\n      <td>9.4</td>\n      <td>20.3</td>\n      <td>.460</td>\n      <td>3.1</td>\n      <td>8.0</td>\n      <td>.382</td>\n      <td>6.3</td>\n      <td>12.3</td>\n      <td>...</td>\n      <td>.904</td>\n      <td>0.7</td>\n      <td>3.1</td>\n      <td>3.7</td>\n      <td>9.7</td>\n      <td>0.9</td>\n      <td>0.1</td>\n      <td>4.0</td>\n      <td>1.7</td>\n      <td>28.4</td>\n    </tr>\n    <tr>\n      <th>839</th>\n      <td>Omer Yurtseven</td>\n      <td>12.6</td>\n      <td>2.3</td>\n      <td>4.4</td>\n      <td>.526</td>\n      <td>0.0</td>\n      <td>0.2</td>\n      <td>.091</td>\n      <td>2.3</td>\n      <td>4.2</td>\n      <td>...</td>\n      <td>.623</td>\n      <td>1.5</td>\n      <td>3.7</td>\n      <td>5.3</td>\n      <td>0.9</td>\n      <td>0.3</td>\n      <td>0.4</td>\n      <td>0.7</td>\n      <td>1.5</td>\n      <td>5.3</td>\n    </tr>\n    <tr>\n      <th>840</th>\n      <td>Cody Zeller</td>\n      <td>13.1</td>\n      <td>1.9</td>\n      <td>3.3</td>\n      <td>.567</td>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>.000</td>\n      <td>1.9</td>\n      <td>3.2</td>\n      <td>...</td>\n      <td>.776</td>\n      <td>1.9</td>\n      <td>2.8</td>\n      <td>4.6</td>\n      <td>0.8</td>\n      <td>0.3</td>\n      <td>0.2</td>\n      <td>0.7</td>\n      <td>2.1</td>\n      <td>5.2</td>\n    </tr>\n    <tr>\n      <th>841</th>\n      <td>Ivica Zubac</td>\n      <td>24.4</td>\n      <td>4.1</td>\n      <td>6.5</td>\n      <td>.626</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td></td>\n      <td>4.1</td>\n      <td>6.5</td>\n      <td>...</td>\n      <td>.727</td>\n      <td>2.9</td>\n      <td>5.6</td>\n      <td>8.5</td>\n      <td>1.6</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.5</td>\n      <td>2.7</td>\n      <td>10.3</td>\n    </tr>\n  </tbody>\n</table>\n<p>842 rows × 24 columns</p>\n</div>\n```\n:::\n:::\n\n\n\n\nSo now that we have this data, I will take all of the features besides position, age, team, games played, and games started and will use them to create clusters so we can start to draw some conclusions. We should feel pretty good about modeling the clusters as gaussian since there are over eight hundred players that played in 2022 which means we should feel alright about assuming normality across each predictor.\n\n",
    "supporting": [
      "Stat-61-Final-Project_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}