{"title":"Gaussian Mixture Models and Expectation-Maximization","markdown":{"yaml":{"title":"Gaussian Mixture Models and Expectation-Maximization","author":"Abraham Porschet","date":"2023-12-10","categories":["code","analysis"],"image":"image.png"},"headingText":"Expectation Maximization","containsRefs":false,"markdown":"\n\n\nThe *Expectation Maximization (E-M) Algorithm* is an iterative approach to finding maximum likelihood estimates for latent variables (since the likelihoods we want to maximize are only indirectly available). It is comprised of an estimation step, which tries to estimate the unknown variables, and a maximization step, which then tries to optimize the parameters of the model to better explain the data.\n\nThe unknown parameters are sometimes written as $\\phi$ or $\\Theta$, and we can call the latent, \"nuisance,\" variables $J$, and the observed data $U$. So, from above, the process can be roughly seen as \n$$ \\Theta^* = \\operatorname*{argmax}_{\\Theta} \\sum_{J\\in\\mathcal{J}^n} P(\\Theta, J|U) $$ \nSince this shows us maximizing the posterior probability of parameters $\\Theta$ given our data and we are summing over $J$ in order to marginalize out our latent variables (Dellaert, 2002).\n\nThis process was first rigorously defined on the exponential family, where the probability density functions take the form \n$$ f(x|\\phi) = b(x)\\exp(\\phi t(x)^T/a(\\phi))$$\n\nwhere $\\phi$ is a $1\\times r$ parameter vector and $t(x)$ is a $1\\times r$ vector of sufficient statistics for the data. Our \"natural parameter\" for these exponential distributions is given by some $r\\times r$ linear transformation. \n\nTo run the \\textbf{E-M} algorithm on this example, we first enter the expectation step, and take $t^{(p)}=E[t(x)|y,\\phi^{(p)}]$  with the $(p)$ denoting the $p^{th}$ cycle of the algorithm, trying to estimate the vector of sufficient statistics for the exponential distribution. \n\nThe maximization step, is then taking the equation $E[t(x)|y,\\phi^{(p)}]=t^{(p)}$ and we call the solution to this equation $\\phi^{(p+1)}$. We then plug in $\\phi^{(p+1)}$ to the expectation step and keep iterating (Dempster *et al.* 1976). \n\nOne of the coolest parts of this algorithm is that it actually converges to a local maximum almost every time (Dempster *et al.* 1976). Dempster, Laird, and Rubin may have been slighly optimistic about how often E-M converged, due to a misuse of the triangle inequality, but C.F. Jeff Wu found and corrected that mistake, and came out with a more concrete understanding of when the algorithm converges, and to what it converges (Wu, 1983). While the algorithm may not converge to a local maximum every time, the likelihood that the parameters the algorithm optimizes each step are better estimates increases after each cycle of the algorithm. And thus, for some E-M sequence $\\phi_p$, if $L(\\phi_p)$ is bounded above, then E-M converges to some $L^*$.\n\nIn Dempster, Laird, and Rubin's seminal paper *Maximum Likelihood via the 'EM' Algorithm*, they enumerate the process detailed above, proved the convergence, and later on, proposed that E-M could be used to in *finite clusters*. This foreshadowed the most common usage of the algorithm, clustering, or more specifically, dividing unlabeled data into nice clusters. For example, if we know that our raw data is comprised of unique groups represented by different probability distributions, we can use the E-M algorithm to systematically change the parameters for the estimated distributions of these groups to maximize the probability that the data belongs to the proposed clustering.\n\n## Gaussian Mixture Modeling\n\nOne of the most common usages of expectation maximization, and specifically clustering, is *Gaussian Mixture Modeling* (GMM) (Hasselblad 1966). This process is essentially assuming that each group you are trying to sort out is represented by a multivariate normal distribution. This is often a very convenient technique to use because things often actually do follow normal distributions because of the central limit theorem and because once we have clusters that are normal, it is much easier to do inference on the clusters. In industry and other settings where statisticians have to communicate their results to non-statisticians it is also helpful to be able to talk about results in the context of normal distributions.\n\nGMMs are used to observe clusters everywhere. They are used to create customer archetypes in retail, to better understand the different ways people shop, they are used in medical scenarios in order to identify types of tumors for cancer detection.\n\n### Example\n\n```{python}\n#| echo: false\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.datasets import make_blobs\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt \nimport pandas as pd \nimport numpy as np\nfrom numpy import random\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport seaborn as sns \nfrom sklearn.metrics import silhouette_score, silhouette_samples\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import pairwise_distances_argmin_min\nimport requests\n```\n\nFor a flavor of the effectiveness and accuracy of the algorithm, I will make a set of five blobs of data, each with a center, and then I will show how accurately the algorithm can cluster the data into the blobs that created the underlying data.\n\n```{python}\n#| echo: false\n#set a random seed so that we actually get clusters that kind of look like separate clusters\nrandom.seed(195)\nx, _ = make_blobs(n_samples=450, centers=5, cluster_std=1.84)\nplt.figure(figsize=(8, 6))\nplt.scatter(x[:,0], x[:,1])\nplt.show() \n```\n\nNow we fit the algorithm with the prior understanding that the data is made of five clusters of approximately normal data.\n\n```{python}\n#| output: false\n#| echo: false\ngm = GaussianMixture(n_components=5).fit(x)\n\ngm.get_params() \n\n{'covariance_type': 'full',\n 'init_params': 'kmeans',\n 'max_iter': 100,\n 'means_init': None,\n 'n_components': 5,\n 'n_init': 1,\n 'precisions_init': None,\n 'random_state': None,\n 'reg_covar': 1e-06,\n 'tol': 0.001,\n 'verbose': 0,\n 'verbose_interval': 10,\n 'warm_start': False,\n 'weights_init': None} \n```\n\nWe next fit the model and let it learn from the data, in the next plot, we plot the centers that the data came up with, and on the graph after that we will color each of the clusters the algorithm identified uniquely.\n\n```{python}\n#| echo: false\ncenters = gm.means_\nplt.figure(figsize=(8, 6))\nplt.scatter(x[:,0], x[:,1], label=\"data\")\nplt.scatter(centers[:,0], centers[:,1],c='r', label=\"centers\")\nplt.legend()\nplt.show() \n\n```\n```{python}\n#| echo: false\npred = gm.predict(x)    \n\ndf = pd.DataFrame({'x':x[:,0], 'y':x[:,1], 'label':pred})\ngroups = df.groupby('label')\n\nig, ax = plt.subplots()\nfor name, group in groups:\n    ax.scatter(group.x, group.y, label=name)\n\nax.legend()\nplt.show() \n```\n\nThe accuracy is great! This problem wasn't terribly difficult, but it is better at understanding 'groups' of things than other classification methods in statistics and similar fields. Since many situations don't have linearly separable data, like the example above, clustering models can be a great choice over other models that are useful in other situations, such as regression models (which are sometimes used for clssification in separable cases, i.e. gentoo penguin dataset).\n\nConsider a dataset with millions of points and possibly hundreds or thousands of dimensions. E-M allows for insights in incredibly complex problems like very sensitive anomaly detection for genetic disorders by clustering genes or proteins.\n\n## The NBA\n\n![](nbaPic.jpeg){width=\"50%\"}\n\nBasketball is changing. Players like Stephen Curry have changed perceptions around what a point guard is supposed to be, Nikola Jokic is reinventing the center position, and some teams are playing with centers who are shorter than 6'5\". Another even bigger change is the advent of extremely tall players playing seemingly positionless basketball, the trend started by players such as Kevin Durant and Kristaps Porzingis, and continued by younger players like Chet Holmgren and Victor Wembanyama.\n\nPeople are playing basketball differently. To effectively understand the game, the old labels of point guard, shooting guard, center, power forward, and small forward don't seem to suffice, which means that we want to find new labels for positions in order to regroup players to better understand modern roster construction.\n\nThis seems to be a problem uniquely well suited to clustering. I plan on looking at a few things, how the clusters of players in the modern NBA compare to the positions that players are assigned to. Secondly, I am curious if the NBA has become more specialized, i.e. if there are more than five positions, and players are acquired and used for more specific purposes.\n```{python}\n#| echo: false\n#| output: false\nurls = ['https://www.basketball-reference.com/leagues/NBA_2022_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2023_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2021_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2019_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2018_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2017_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2016_per_game.html']\ndef scrape_basketball_data(url):\n    html = urlopen(url)\n    org_html = BeautifulSoup(html)\n    org_html.findAll('tr', limit=2)\n\n    headers = [th.getText() for th in org_html.findAll('tr', limit=2)[0].findAll('th')]\n    headers = headers[1:]\n\n    rows = org_html.findAll('tr')[1:]\n    player_stats = [[td.getText() for td in rows[i].findAll('td')] for i in range(len(rows))]\n    data = pd.DataFrame(player_stats, columns = headers)\n    \n    return data\n\ndef aggregate_data_from_urls(urls):\n    all_dataframes = []\n    for url in urls:\n        df = scrape_basketball_data(url)\n        all_dataframes.append(df)\n    \n    combined_data = pd.concat(all_dataframes, ignore_index=True)\n    combined_data = combined_data.apply(pd.to_numeric, errors='ignore')\n    \n    aggregated_data = combined_data.groupby('Player', as_index=False).mean()\n    return aggregated_data\n\ndf = aggregate_data_from_urls(urls)\ndf = df[df['MP']>=10]\ndf\n```\n\nThere are a few instances of the same player showing multiple times in the dataframe since people were traded and played for different teams throughout the season, so I took the averages of all of their values to create a set of stats for the season for them.\n\n\n```{python}\n#| echo: false\n#| output: false\ndf=df.drop(columns=['Age', 'G', 'GS', '2P', '3P', 'TRB', 'FT','PF', 'FG', 'MP'], axis=1)\n```\n\nSo now that we have this data, I will take all of the features besides position, age, team, games played, games started (As well as some irrelevant features, i.e. those that are just linear combinations of other features) and will use them to create clusters so we can start to draw some conclusions. We should feel pretty good about modeling the clusters as gaussian since there are over eight hundred players that played in 2022 which means we should feel alright about assuming normality across each predictor, especially since we have data across 6 seasons.\n\n```{python}\n#| echo: false\n#| output: false\nX = df.copy(deep=True)\n\nX.replace('', np.nan, inplace=True)\n# Drop rows with NaN values\nX.dropna(inplace=True)\nnames = X[\"Player\"]\nX = X.drop(\"Player\", axis = 1)\n```\n\n```{python}\n#| echo: false\nn_components = np.arange(1, 15)\nmodels = [GaussianMixture(n, covariance_type='full', random_state=0).fit(X)\n          for n in n_components]\n\nplt.plot(n_components, [m.bic(X) for m in models], label='BIC')\nplt.plot(n_components, [m.aic(X) for m in models], label='AIC')\nplt.legend(loc='best')\nplt.xlabel('n_components');\n```\n\nThis plot shows metrics *Bayesian Information Criterion* (BIC) and *Aikake Information Criterion* (AIC) plotted against the number of clusters to see which number of clusters would most likely produce the data while also penalizing overfitting. The lower the value the better fit the model is for the data. Both of the metrics are based on the likelihood function for the mixture models and the main difference between them is that BIC punishes models with more parameters more than AIC, as we can see from the plot, since the BIC is minimized at right around 4 clusters and AIC continues to decrease as the number of components reaches 15. The AIC is equal to $2k-2\\ln(L)$ and the BIC is equal to $k\\ln(n)-2\\ln(L)$ where $k$ is the number of parameters. So as the likelihood that the model proposed (dependent on the number of clusters) has a higher likelihood of explaining the data, the AIC and BIC both decrease. \n\nThis graph essentially says that the model that explains the data the best without overfitting has 4 clusters (potentially saying that the NBA is *less* specialized than in the past).\n\n```{python}\n#| echo: false\nmodel = GaussianMixture(n_components=4, random_state=0).fit(X)\n```\n\n```{python}\n#| echo: false\n#| output: false\npreds = pd.Series(model.predict(X))\nX[\"Cluster\"] = preds.values\nX[\"Name\"] = names\nZ = X.copy(deep=True)\nZ = Z.drop(['Name', 'Cluster'], axis = 1)\n```\n\n```{python}\n#| echo: false\n#| output: false\nX_numeric = X.select_dtypes(include='number')\n\n# Scale the numeric columns\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_numeric)\n\n# Convert back to DataFrame (keeping the column names)\nX_scaled_df = pd.DataFrame(X_scaled, columns=X_numeric.columns)\n\n# Add the cluster assignments to your scaled data\nX_scaled_df['Cluster'] = preds.values\n\n# Melt the DataFrame to create a long-form dataset for violin plot\nmelted_data_scaled = X_scaled_df.melt(id_vars='Cluster', var_name='Statistic', value_name='Value')\n\n# Plotting separate violin plots for each statistic\ng = sns.FacetGrid(melted_data_scaled, col='Statistic', col_wrap=3, height=4)\ng.map(sns.violinplot, 'Cluster', 'Value', palette='Set3')\ng.set_xticklabels(rotation=45)\ng.set_titles('{col_name}')\nplt.tight_layout()\nplt.show()\n```\n```{python}\n#| echo: false\n#| output: false\ncluster_centers = model.means_\nX_numeric = X.select_dtypes(include='number')\nX_numeric = X_numeric.drop('Cluster', axis = 1)\n\n# Scale the numeric columns\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_numeric)\n# Convert back to DataFrame (keeping the column names)\nX_scaled_df = pd.DataFrame(X_scaled, columns=X_numeric.columns)\n\n# Add the cluster assignments to your scaled data\nX_scaled_df['Cluster'] = preds.values\n\n# Iterate through each statistic and create individual violin plots\nfor stat in X_numeric.columns:\n    # Create melted data for the current statistic\n    melted_data_stat = X_scaled_df.melt(id_vars='Cluster', value_vars=stat, var_name='Statistic', value_name='Value')\n\n    # Plot the violin plot for the current statistic\n    plt.figure(figsize=(6, 4))  # Adjust the figure size if needed\n    sns.violinplot(x='Cluster', y='Value', data=melted_data_stat, palette='Set3')\n    plt.title(f'Violin Plot for {stat}')\n    plt.xlabel('Cluster')\n    plt.ylabel('Scaled Value')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n    #this was used to generate the violin plots I threw all over the end of this paper\n```\n\n\n### Results\n\nThe following violin plots (which have been scaled) show the distributions for each cluster for each statistic. \n\n::: {layout-nrow=1}\n![](2PA.png)\n\n![](3PA.png)\n:::\nCluster 2 obviously attempts what looks like significantly more two point shots and three point shots. Cluster 1 attempts the second most 2 pointers while also completing the least three pointers which contrasts with Cluster 3 which attempts the least two pointers while attempting more three pointers compared to the other clusters.\n\n:::{layout-nrow=1}\n![](FTA.png)\n\n![](PTS.png)\n:::\n\nFrom the first two plots, it makes sense that Cluster 2, on average, scores the most points because they attempt the most 2PT and 3PT shots. Clusters 0 and 1 score the next most points on average, probably due to the larger number of 2PT attempts by Cluster 1 and the larger number of 3PT attempts from Cluster 0. Cluster 0 has a much larger mean number of free throws attempted while Cluster 3 has a significantly lower number of free throws attempted.\n\nThis leads us to start to see a picture being painted about these players, Cluster 2 in particular has the ball a lot of the time, they score the most points, they shoot the most free throws, they are high usage players. \n\n:::{layout-nrow=1}\n![](TOV.png)\n\n![](AST.png)\n:::\n\nCluster 2 also has the most turnovers on average, while Cluster 3 commits considerably fewer average turnovers. Clusters 1 and 3 have the fewest average assists and Cluster 0 falls somewhere in between 0 and 2. \n\nAnother way we can better understand these clusters is see which players are most representative of each cluster, letting us use domain knowledge about the sport to draw further conclusions about how players get sorted into clusters. We just use the smallest distance between the point for each cluster's center, and any given player in the set. \n\nFor cluster 0, the player closest to the center is Patty Mills, while he is not a huge star, he is known for being a great supporting player, and even later in his career coming off the bench to add quick points. This helps us validate our violin plots, since he is the closest player to the center of the cluster, we can assume that he is relatively close to the center of each of the marginal normal distributions for each statistic, he doesn't take a lot of shots since he is playing a more supportive role, but since he is coming in to try and score quickly he is shooting more threes than twos and since players like Mills are usually primarily shooters, they won't attempt as many foul shots, since they aren't attempting as many 2 points shots near the rim. Other players in this cluster include Seth Curry, Shake Milton, and Bruce Brown (who embodied this role perfectly in last springs championship run). This is the most common cluster for players to fall into (out of players in the last 6 seasons).\n\nThe center of Cluster 1 is Robin Lopez, the less famous brother of another member of Cluster 1, Brook Lopez. These players are essentially the classical center, they rebound more than anyone else, they take far more twos than threes, they don't assist much, they take more foul shots since they get fouled near the rim. This is by a considerable margin, the smallest cluster. It seems fair to postulate that this is because of their lack of shooting ability, but there is still a significant number of players that play this position.\n\nFor Cluster 2, the center of this cluster is Chris Paul. He is a perfect example of this type of player, while he doesn't score as much as other members of this cluster (Jokic, Steph Curry, Luka Doncic among them) he plays with a high usage rate and gets everything done for his team, he assists, he shoots, he rebounds, he draws fouls. These players are almost all guards and forwards and are usually the 'franchise player.' This is the second smallest cluster, probably due to the fact that teams can only have one or two players that really dominate possession and also due to the fact that it is quite difficult to be a player even comparable to Chris Paul and Stephen Curry.\n\nCluster 3's center is Duncan Robinson, a rare liberal arts college baller. These are players who play low minutes, and their only job is to shoot threes and play some defense. These guys are not expected to generate assists or rebounds. Another good example of a player in this cluster is PJ Tucker, who has never averaged too many points but has continually shot three pointers with high accuracy and is known for his strong defensive play. This is the second largest cluster out of current players, presumably because of the transition to more three point focused offenses that started in the early-mid 2010s.\n\n![Duncan Robinson before he took his talents to South Beach](Duncan_Robinson.jpeg)\n\nUsing common model fit measures like BIC and AIC we can see that the GMM approach fits the task of clustering NBA players. We can also see that a set of four clusters can explain the approximate roles of players through statistics rather than what sometimes falls to heuristics. I also find it interesting that the best number of clusters was *less* than 5, instead of more than 5. I had suspected that the NBA had become more specialized, which could possibly still be true, but there are still fewer positions. Which seems to bring us to the conclusion that either players are being asked to handle a broader range of assignments on court, the game has changed such that there are fewer things that coaches need players to do on court, and they are just asked to specialize on those things, or that any other specialization that players have to do beyond the clusters that we identified is actually on the defensive end, which is much harder to measure statistically.\n\nMy code for this post can be found at my [Github](https://github.com/aporsch1/Stat61_Final_Project/tree/main)\n\n### References\n\nDellaert, Frank. “The Expectation Maximization Algorithm - Web.Itu.Edu.Tr.” Georgia Tech, 2002, web.itu.edu.tr/~sgunduz/courses/verimaden/paper/em-paper.pdf. \n\nDempster, Arthur P, et al. “Maximum Likelihood from Incomplete Data via the EM Algorithm.” Harvard.edu, 2022, dash.harvard.edu/handle/1/3426318, http://nrs.harvard.edu/urn-3:HUL.InstRepos:3426318. Accessed 18 Dec. 2023.\n\nMurphy, K. P. (2022). Probabilistic Machine Learning: An introduction. MIT Press.\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n# Expectation Maximization\n\nThe *Expectation Maximization (E-M) Algorithm* is an iterative approach to finding maximum likelihood estimates for latent variables (since the likelihoods we want to maximize are only indirectly available). It is comprised of an estimation step, which tries to estimate the unknown variables, and a maximization step, which then tries to optimize the parameters of the model to better explain the data.\n\nThe unknown parameters are sometimes written as $\\phi$ or $\\Theta$, and we can call the latent, \"nuisance,\" variables $J$, and the observed data $U$. So, from above, the process can be roughly seen as \n$$ \\Theta^* = \\operatorname*{argmax}_{\\Theta} \\sum_{J\\in\\mathcal{J}^n} P(\\Theta, J|U) $$ \nSince this shows us maximizing the posterior probability of parameters $\\Theta$ given our data and we are summing over $J$ in order to marginalize out our latent variables (Dellaert, 2002).\n\nThis process was first rigorously defined on the exponential family, where the probability density functions take the form \n$$ f(x|\\phi) = b(x)\\exp(\\phi t(x)^T/a(\\phi))$$\n\nwhere $\\phi$ is a $1\\times r$ parameter vector and $t(x)$ is a $1\\times r$ vector of sufficient statistics for the data. Our \"natural parameter\" for these exponential distributions is given by some $r\\times r$ linear transformation. \n\nTo run the \\textbf{E-M} algorithm on this example, we first enter the expectation step, and take $t^{(p)}=E[t(x)|y,\\phi^{(p)}]$  with the $(p)$ denoting the $p^{th}$ cycle of the algorithm, trying to estimate the vector of sufficient statistics for the exponential distribution. \n\nThe maximization step, is then taking the equation $E[t(x)|y,\\phi^{(p)}]=t^{(p)}$ and we call the solution to this equation $\\phi^{(p+1)}$. We then plug in $\\phi^{(p+1)}$ to the expectation step and keep iterating (Dempster *et al.* 1976). \n\nOne of the coolest parts of this algorithm is that it actually converges to a local maximum almost every time (Dempster *et al.* 1976). Dempster, Laird, and Rubin may have been slighly optimistic about how often E-M converged, due to a misuse of the triangle inequality, but C.F. Jeff Wu found and corrected that mistake, and came out with a more concrete understanding of when the algorithm converges, and to what it converges (Wu, 1983). While the algorithm may not converge to a local maximum every time, the likelihood that the parameters the algorithm optimizes each step are better estimates increases after each cycle of the algorithm. And thus, for some E-M sequence $\\phi_p$, if $L(\\phi_p)$ is bounded above, then E-M converges to some $L^*$.\n\nIn Dempster, Laird, and Rubin's seminal paper *Maximum Likelihood via the 'EM' Algorithm*, they enumerate the process detailed above, proved the convergence, and later on, proposed that E-M could be used to in *finite clusters*. This foreshadowed the most common usage of the algorithm, clustering, or more specifically, dividing unlabeled data into nice clusters. For example, if we know that our raw data is comprised of unique groups represented by different probability distributions, we can use the E-M algorithm to systematically change the parameters for the estimated distributions of these groups to maximize the probability that the data belongs to the proposed clustering.\n\n## Gaussian Mixture Modeling\n\nOne of the most common usages of expectation maximization, and specifically clustering, is *Gaussian Mixture Modeling* (GMM) (Hasselblad 1966). This process is essentially assuming that each group you are trying to sort out is represented by a multivariate normal distribution. This is often a very convenient technique to use because things often actually do follow normal distributions because of the central limit theorem and because once we have clusters that are normal, it is much easier to do inference on the clusters. In industry and other settings where statisticians have to communicate their results to non-statisticians it is also helpful to be able to talk about results in the context of normal distributions.\n\nGMMs are used to observe clusters everywhere. They are used to create customer archetypes in retail, to better understand the different ways people shop, they are used in medical scenarios in order to identify types of tumors for cancer detection.\n\n### Example\n\n```{python}\n#| echo: false\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.datasets import make_blobs\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt \nimport pandas as pd \nimport numpy as np\nfrom numpy import random\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport seaborn as sns \nfrom sklearn.metrics import silhouette_score, silhouette_samples\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import pairwise_distances_argmin_min\nimport requests\n```\n\nFor a flavor of the effectiveness and accuracy of the algorithm, I will make a set of five blobs of data, each with a center, and then I will show how accurately the algorithm can cluster the data into the blobs that created the underlying data.\n\n```{python}\n#| echo: false\n#set a random seed so that we actually get clusters that kind of look like separate clusters\nrandom.seed(195)\nx, _ = make_blobs(n_samples=450, centers=5, cluster_std=1.84)\nplt.figure(figsize=(8, 6))\nplt.scatter(x[:,0], x[:,1])\nplt.show() \n```\n\nNow we fit the algorithm with the prior understanding that the data is made of five clusters of approximately normal data.\n\n```{python}\n#| output: false\n#| echo: false\ngm = GaussianMixture(n_components=5).fit(x)\n\ngm.get_params() \n\n{'covariance_type': 'full',\n 'init_params': 'kmeans',\n 'max_iter': 100,\n 'means_init': None,\n 'n_components': 5,\n 'n_init': 1,\n 'precisions_init': None,\n 'random_state': None,\n 'reg_covar': 1e-06,\n 'tol': 0.001,\n 'verbose': 0,\n 'verbose_interval': 10,\n 'warm_start': False,\n 'weights_init': None} \n```\n\nWe next fit the model and let it learn from the data, in the next plot, we plot the centers that the data came up with, and on the graph after that we will color each of the clusters the algorithm identified uniquely.\n\n```{python}\n#| echo: false\ncenters = gm.means_\nplt.figure(figsize=(8, 6))\nplt.scatter(x[:,0], x[:,1], label=\"data\")\nplt.scatter(centers[:,0], centers[:,1],c='r', label=\"centers\")\nplt.legend()\nplt.show() \n\n```\n```{python}\n#| echo: false\npred = gm.predict(x)    \n\ndf = pd.DataFrame({'x':x[:,0], 'y':x[:,1], 'label':pred})\ngroups = df.groupby('label')\n\nig, ax = plt.subplots()\nfor name, group in groups:\n    ax.scatter(group.x, group.y, label=name)\n\nax.legend()\nplt.show() \n```\n\nThe accuracy is great! This problem wasn't terribly difficult, but it is better at understanding 'groups' of things than other classification methods in statistics and similar fields. Since many situations don't have linearly separable data, like the example above, clustering models can be a great choice over other models that are useful in other situations, such as regression models (which are sometimes used for clssification in separable cases, i.e. gentoo penguin dataset).\n\nConsider a dataset with millions of points and possibly hundreds or thousands of dimensions. E-M allows for insights in incredibly complex problems like very sensitive anomaly detection for genetic disorders by clustering genes or proteins.\n\n## The NBA\n\n![](nbaPic.jpeg){width=\"50%\"}\n\nBasketball is changing. Players like Stephen Curry have changed perceptions around what a point guard is supposed to be, Nikola Jokic is reinventing the center position, and some teams are playing with centers who are shorter than 6'5\". Another even bigger change is the advent of extremely tall players playing seemingly positionless basketball, the trend started by players such as Kevin Durant and Kristaps Porzingis, and continued by younger players like Chet Holmgren and Victor Wembanyama.\n\nPeople are playing basketball differently. To effectively understand the game, the old labels of point guard, shooting guard, center, power forward, and small forward don't seem to suffice, which means that we want to find new labels for positions in order to regroup players to better understand modern roster construction.\n\nThis seems to be a problem uniquely well suited to clustering. I plan on looking at a few things, how the clusters of players in the modern NBA compare to the positions that players are assigned to. Secondly, I am curious if the NBA has become more specialized, i.e. if there are more than five positions, and players are acquired and used for more specific purposes.\n```{python}\n#| echo: false\n#| output: false\nurls = ['https://www.basketball-reference.com/leagues/NBA_2022_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2023_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2021_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2019_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2018_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2017_per_game.html', 'https://www.basketball-reference.com/leagues/NBA_2016_per_game.html']\ndef scrape_basketball_data(url):\n    html = urlopen(url)\n    org_html = BeautifulSoup(html)\n    org_html.findAll('tr', limit=2)\n\n    headers = [th.getText() for th in org_html.findAll('tr', limit=2)[0].findAll('th')]\n    headers = headers[1:]\n\n    rows = org_html.findAll('tr')[1:]\n    player_stats = [[td.getText() for td in rows[i].findAll('td')] for i in range(len(rows))]\n    data = pd.DataFrame(player_stats, columns = headers)\n    \n    return data\n\ndef aggregate_data_from_urls(urls):\n    all_dataframes = []\n    for url in urls:\n        df = scrape_basketball_data(url)\n        all_dataframes.append(df)\n    \n    combined_data = pd.concat(all_dataframes, ignore_index=True)\n    combined_data = combined_data.apply(pd.to_numeric, errors='ignore')\n    \n    aggregated_data = combined_data.groupby('Player', as_index=False).mean()\n    return aggregated_data\n\ndf = aggregate_data_from_urls(urls)\ndf = df[df['MP']>=10]\ndf\n```\n\nThere are a few instances of the same player showing multiple times in the dataframe since people were traded and played for different teams throughout the season, so I took the averages of all of their values to create a set of stats for the season for them.\n\n\n```{python}\n#| echo: false\n#| output: false\ndf=df.drop(columns=['Age', 'G', 'GS', '2P', '3P', 'TRB', 'FT','PF', 'FG', 'MP'], axis=1)\n```\n\nSo now that we have this data, I will take all of the features besides position, age, team, games played, games started (As well as some irrelevant features, i.e. those that are just linear combinations of other features) and will use them to create clusters so we can start to draw some conclusions. We should feel pretty good about modeling the clusters as gaussian since there are over eight hundred players that played in 2022 which means we should feel alright about assuming normality across each predictor, especially since we have data across 6 seasons.\n\n```{python}\n#| echo: false\n#| output: false\nX = df.copy(deep=True)\n\nX.replace('', np.nan, inplace=True)\n# Drop rows with NaN values\nX.dropna(inplace=True)\nnames = X[\"Player\"]\nX = X.drop(\"Player\", axis = 1)\n```\n\n```{python}\n#| echo: false\nn_components = np.arange(1, 15)\nmodels = [GaussianMixture(n, covariance_type='full', random_state=0).fit(X)\n          for n in n_components]\n\nplt.plot(n_components, [m.bic(X) for m in models], label='BIC')\nplt.plot(n_components, [m.aic(X) for m in models], label='AIC')\nplt.legend(loc='best')\nplt.xlabel('n_components');\n```\n\nThis plot shows metrics *Bayesian Information Criterion* (BIC) and *Aikake Information Criterion* (AIC) plotted against the number of clusters to see which number of clusters would most likely produce the data while also penalizing overfitting. The lower the value the better fit the model is for the data. Both of the metrics are based on the likelihood function for the mixture models and the main difference between them is that BIC punishes models with more parameters more than AIC, as we can see from the plot, since the BIC is minimized at right around 4 clusters and AIC continues to decrease as the number of components reaches 15. The AIC is equal to $2k-2\\ln(L)$ and the BIC is equal to $k\\ln(n)-2\\ln(L)$ where $k$ is the number of parameters. So as the likelihood that the model proposed (dependent on the number of clusters) has a higher likelihood of explaining the data, the AIC and BIC both decrease. \n\nThis graph essentially says that the model that explains the data the best without overfitting has 4 clusters (potentially saying that the NBA is *less* specialized than in the past).\n\n```{python}\n#| echo: false\nmodel = GaussianMixture(n_components=4, random_state=0).fit(X)\n```\n\n```{python}\n#| echo: false\n#| output: false\npreds = pd.Series(model.predict(X))\nX[\"Cluster\"] = preds.values\nX[\"Name\"] = names\nZ = X.copy(deep=True)\nZ = Z.drop(['Name', 'Cluster'], axis = 1)\n```\n\n```{python}\n#| echo: false\n#| output: false\nX_numeric = X.select_dtypes(include='number')\n\n# Scale the numeric columns\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_numeric)\n\n# Convert back to DataFrame (keeping the column names)\nX_scaled_df = pd.DataFrame(X_scaled, columns=X_numeric.columns)\n\n# Add the cluster assignments to your scaled data\nX_scaled_df['Cluster'] = preds.values\n\n# Melt the DataFrame to create a long-form dataset for violin plot\nmelted_data_scaled = X_scaled_df.melt(id_vars='Cluster', var_name='Statistic', value_name='Value')\n\n# Plotting separate violin plots for each statistic\ng = sns.FacetGrid(melted_data_scaled, col='Statistic', col_wrap=3, height=4)\ng.map(sns.violinplot, 'Cluster', 'Value', palette='Set3')\ng.set_xticklabels(rotation=45)\ng.set_titles('{col_name}')\nplt.tight_layout()\nplt.show()\n```\n```{python}\n#| echo: false\n#| output: false\ncluster_centers = model.means_\nX_numeric = X.select_dtypes(include='number')\nX_numeric = X_numeric.drop('Cluster', axis = 1)\n\n# Scale the numeric columns\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_numeric)\n# Convert back to DataFrame (keeping the column names)\nX_scaled_df = pd.DataFrame(X_scaled, columns=X_numeric.columns)\n\n# Add the cluster assignments to your scaled data\nX_scaled_df['Cluster'] = preds.values\n\n# Iterate through each statistic and create individual violin plots\nfor stat in X_numeric.columns:\n    # Create melted data for the current statistic\n    melted_data_stat = X_scaled_df.melt(id_vars='Cluster', value_vars=stat, var_name='Statistic', value_name='Value')\n\n    # Plot the violin plot for the current statistic\n    plt.figure(figsize=(6, 4))  # Adjust the figure size if needed\n    sns.violinplot(x='Cluster', y='Value', data=melted_data_stat, palette='Set3')\n    plt.title(f'Violin Plot for {stat}')\n    plt.xlabel('Cluster')\n    plt.ylabel('Scaled Value')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n    #this was used to generate the violin plots I threw all over the end of this paper\n```\n\n\n### Results\n\nThe following violin plots (which have been scaled) show the distributions for each cluster for each statistic. \n\n::: {layout-nrow=1}\n![](2PA.png)\n\n![](3PA.png)\n:::\nCluster 2 obviously attempts what looks like significantly more two point shots and three point shots. Cluster 1 attempts the second most 2 pointers while also completing the least three pointers which contrasts with Cluster 3 which attempts the least two pointers while attempting more three pointers compared to the other clusters.\n\n:::{layout-nrow=1}\n![](FTA.png)\n\n![](PTS.png)\n:::\n\nFrom the first two plots, it makes sense that Cluster 2, on average, scores the most points because they attempt the most 2PT and 3PT shots. Clusters 0 and 1 score the next most points on average, probably due to the larger number of 2PT attempts by Cluster 1 and the larger number of 3PT attempts from Cluster 0. Cluster 0 has a much larger mean number of free throws attempted while Cluster 3 has a significantly lower number of free throws attempted.\n\nThis leads us to start to see a picture being painted about these players, Cluster 2 in particular has the ball a lot of the time, they score the most points, they shoot the most free throws, they are high usage players. \n\n:::{layout-nrow=1}\n![](TOV.png)\n\n![](AST.png)\n:::\n\nCluster 2 also has the most turnovers on average, while Cluster 3 commits considerably fewer average turnovers. Clusters 1 and 3 have the fewest average assists and Cluster 0 falls somewhere in between 0 and 2. \n\nAnother way we can better understand these clusters is see which players are most representative of each cluster, letting us use domain knowledge about the sport to draw further conclusions about how players get sorted into clusters. We just use the smallest distance between the point for each cluster's center, and any given player in the set. \n\nFor cluster 0, the player closest to the center is Patty Mills, while he is not a huge star, he is known for being a great supporting player, and even later in his career coming off the bench to add quick points. This helps us validate our violin plots, since he is the closest player to the center of the cluster, we can assume that he is relatively close to the center of each of the marginal normal distributions for each statistic, he doesn't take a lot of shots since he is playing a more supportive role, but since he is coming in to try and score quickly he is shooting more threes than twos and since players like Mills are usually primarily shooters, they won't attempt as many foul shots, since they aren't attempting as many 2 points shots near the rim. Other players in this cluster include Seth Curry, Shake Milton, and Bruce Brown (who embodied this role perfectly in last springs championship run). This is the most common cluster for players to fall into (out of players in the last 6 seasons).\n\nThe center of Cluster 1 is Robin Lopez, the less famous brother of another member of Cluster 1, Brook Lopez. These players are essentially the classical center, they rebound more than anyone else, they take far more twos than threes, they don't assist much, they take more foul shots since they get fouled near the rim. This is by a considerable margin, the smallest cluster. It seems fair to postulate that this is because of their lack of shooting ability, but there is still a significant number of players that play this position.\n\nFor Cluster 2, the center of this cluster is Chris Paul. He is a perfect example of this type of player, while he doesn't score as much as other members of this cluster (Jokic, Steph Curry, Luka Doncic among them) he plays with a high usage rate and gets everything done for his team, he assists, he shoots, he rebounds, he draws fouls. These players are almost all guards and forwards and are usually the 'franchise player.' This is the second smallest cluster, probably due to the fact that teams can only have one or two players that really dominate possession and also due to the fact that it is quite difficult to be a player even comparable to Chris Paul and Stephen Curry.\n\nCluster 3's center is Duncan Robinson, a rare liberal arts college baller. These are players who play low minutes, and their only job is to shoot threes and play some defense. These guys are not expected to generate assists or rebounds. Another good example of a player in this cluster is PJ Tucker, who has never averaged too many points but has continually shot three pointers with high accuracy and is known for his strong defensive play. This is the second largest cluster out of current players, presumably because of the transition to more three point focused offenses that started in the early-mid 2010s.\n\n![Duncan Robinson before he took his talents to South Beach](Duncan_Robinson.jpeg)\n\nUsing common model fit measures like BIC and AIC we can see that the GMM approach fits the task of clustering NBA players. We can also see that a set of four clusters can explain the approximate roles of players through statistics rather than what sometimes falls to heuristics. I also find it interesting that the best number of clusters was *less* than 5, instead of more than 5. I had suspected that the NBA had become more specialized, which could possibly still be true, but there are still fewer positions. Which seems to bring us to the conclusion that either players are being asked to handle a broader range of assignments on court, the game has changed such that there are fewer things that coaches need players to do on court, and they are just asked to specialize on those things, or that any other specialization that players have to do beyond the clusters that we identified is actually on the defensive end, which is much harder to measure statistically.\n\nMy code for this post can be found at my [Github](https://github.com/aporsch1/Stat61_Final_Project/tree/main)\n\n### References\n\nDellaert, Frank. “The Expectation Maximization Algorithm - Web.Itu.Edu.Tr.” Georgia Tech, 2002, web.itu.edu.tr/~sgunduz/courses/verimaden/paper/em-paper.pdf. \n\nDempster, Arthur P, et al. “Maximum Likelihood from Incomplete Data via the EM Algorithm.” Harvard.edu, 2022, dash.harvard.edu/handle/1/3426318, http://nrs.harvard.edu/urn-3:HUL.InstRepos:3426318. Accessed 18 Dec. 2023.\n\nMurphy, K. P. (2022). Probabilistic Machine Learning: An introduction. MIT Press.\n\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"Stat-61-Final-Project.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"lux","title-block-banner":true,"title":"Gaussian Mixture Models and Expectation-Maximization","author":"Abraham Porschet","date":"2023-12-10","categories":["code","analysis"],"image":"image.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}